#!/usr/bin/env python3
import os
import re
from sys import argv

# where my notes reside, with a '.shared' file in root
NOTES_PATH = "/home/hemish/data/notes/"
WEBSITE_PATH="/home/hemish/projects/website/"
# website root

shared_notes_file_path = NOTES_PATH + ".shared"
website_shares_path = WEBSITE_PATH + "content/public_shares/"


# '.shared' file does not have .md for simplicity
def get_shared_notes_paths():
    with open(shared_notes_file_path, "rt") as f:
        a = f.readlines()
        a = list(filter(lambda x: not x.isspace(), a))
        a = list(map(lambda x: NOTES_PATH+x.strip()+".md", a))
    return a

def get_title(file_path):
    # Extract the file name without extension
    file_name = os.path.basename(file_path).split('.')[0]
    
    with open(file_path, 'r') as file:
        for line in file:
            # Use regex to match H1 heading
            match = re.match(r'^# (.*)', line)
            if match:
                return match.group(1)
    # If no H1 heading is found, return the file name
    return file_name

from datetime import datetime

def get_file_dates(file_path):
    # Get the creation and last modified times
    stat = os.stat(file_path)
    created_date = datetime.fromtimestamp(stat.st_ctime).date().isoformat()
    updated_date = datetime.fromtimestamp(stat.st_mtime).date().isoformat()
    return created_date, updated_date

def return_adapted_text(path) -> str:
    # return text with metadata to put in content of website
    # metadata would contain title and dates
    with open(path, "rt") as f:
        actual = f.read()
    
    # remove the title line, as title is already given as title of page
    # otherwise, title is shown 2 times, one as title, and one as heading 1 in content
    k = None
    with open(path, 'r') as file:
        for line in file:
            if line.startswith('# '):
                k = line  # Return the line with hash and newline
                break
    
    if k != None:
        actual = actual.replace(k, "")

    created, updated = get_file_dates(path)
    return f"""+++
title = "{get_title(path)}"
date = "{created}"
updated = "{updated}"
+++
"""+actual



if len(argv) == 1:
    # if no command line args are parsed
    
    # create or overwrite for each shared file
    for file in get_shared_notes_paths():
        with open(website_shares_path+os.path.basename(file), "w") as f:
            f.write(return_adapted_text(file))
            
            
    # remove files which are no longer in .shared
    shared_filenames = list(map(lambda x: os.path.basename(x), get_shared_notes_paths()))
    paths = os.listdir(website_shares_path)
    paths.remove("_index.md")
    for path in paths:
        if path not in shared_filenames:
            os.remove(website_shares_path+path)
else:
    # the files which were modified are passed as command line args (full path)
    # the script would check if the file even is present in .shared
    # if it is there, then it updates it
    for arg in argv[1:]:
        if arg in get_shared_notes_paths():
            with open(website_shares_path+os.path.basename(arg), "w") as f:
                f.write(return_adapted_text(arg))
        else:
            try:
                os.remove(website_shares_path+os.path.basename(arg))
            except FileNotFoundError:
                print(f"File does not exist.")
